# Pipeline to deploy opsman to AWS using Pivotal's Platform Automation

# Download the Platform Automation image from Pivnet and push the image to your Gitlab repository 
image: registry.gitlab.com/miclip/acme-gitlab-aws-pas-dojo/platform-automation:2.1.1-beta

before_script:
  - echo "Before script section"
   
after_script:
  - echo "After script section"

stages:
  - terraform
  - fetch
  - deploy

create-infrastructure:
  stage: terraform
  image: pcfnorm/rootfs:1.0.28
  variables:
    S3_BUCKET_TERRAFORM: miclip-terraform
    S3_ENDPOINT: http://s3.amazonaws.com
    S3_REGION: us-east-2
    VARS_FILE: vars/mlsb/terraform.tfvars
    AWS_ACCESS_KEY_ID: $aws_access_key_id
    AWS_SECRET_ACCESS_KEY: $aws_secret_access_key
    TF_VAR_access_key: $aws_access_key_id
    TF_VAR_secret_key: $aws_secret_access_key
    TF_VAR_ssl_cert: $ssl_cert
    TF_VAR_ssl_private_key: $ssl_private_key
  script:
    - terraform init -backend-config="bucket=${S3_BUCKET_TERRAFORM}" -backend-config="key=mlsb/terraform.tfstate" -backend-config="region=${S3_REGION}" terraforming-pas
    - terraform plan -out=pcf.tfplan -var-file=${VARS_FILE} terraforming-pas
    - terraform apply pcf.tfplan

destroy-infrastructure:
  stage: terraform
  image: pcfnorm/rootfs:1.0.28
  when: manual
  variables:
    S3_BUCKET_TERRAFORM: miclip-terraform
    S3_ENDPOINT: http://s3.amazonaws.com
    S3_REGION: us-east-2
    VARS_FILE: vars/mlsb/terraform.tfvars
    AWS_ACCESS_KEY_ID: $aws_access_key_id
    AWS_SECRET_ACCESS_KEY: $aws_secret_access_key
    TF_VAR_access_key: $aws_access_key_id
    TF_VAR_secret_key: $aws_secret_access_key
    TF_VAR_ssl_cert: $ssl_cert
    TF_VAR_ssl_private_key: $ssl_private_key
  script:
    - terraform init -backend-config="bucket=${S3_BUCKET_TERRAFORM}" -backend-config="key=mlsb/terraform.tfstate" -backend-config="region=${S3_REGION}" terraforming-pas
    - terraform destroy -input=false -auto-approve -var-file=${VARS_FILE} terraforming-pas

     
fetch_opsman:
  stage: fetch
  artifacts:
    name: image
    paths:    
      - downloaded-files/*.*
    expire_in: 1 day
  variables:
    CONFIG_FILE: download-product-configs/opsman.yml
    VARS_FILES: ""
    FILES_GLOB: config/download-product-configs/opsman.yml
    VAR_PREFIX: DLP
    DLP_pivnet_token: $pivnet_token
  script: 
   - tasks/gitlab-interpolate.sh
   - tasks/download-product.sh

fetch_healthwatch:
  stage: fetch
  variables:
    CONFIG_FILE: download-product-configs/healthwatch.yml
    VARS_FILES: ""
    FILES_GLOB: config/download-product-configs/healthwatch.yml
    VAR_PREFIX: DLP
    DLP_pivnet_token: $pivnet_token
  script: 
   - tasks/gitlab-interpolate.sh
   - tasks/download-product.sh


install_opsman:
  stage: deploy
  dependencies: 
    - fetch_opsman
  variables:
    IMAGE_FILES: downloaded-files
    VARS_FILES: vars/mlsb/opsman.yml
    OPSMAN_CONFIG_FILE: opsman.yml
    STATE_FILE: mlsb/state.yml
  script:
    - tasks/create-vm.sh

